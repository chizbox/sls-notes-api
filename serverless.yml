service: notes

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  
plugins:
  - serverless-iam-roles-per-function

functions:
  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: post
          path: notes

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
  
  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
    
  getAllNotes:
    handler: handler.getallNotes
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: get
          path: notes
          
# Cloud formation resouce
resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions: 
          - AttributeName: notesId
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
        TableName: 'notes'
        BillingMode: 'PAY_PER_REQUEST'
